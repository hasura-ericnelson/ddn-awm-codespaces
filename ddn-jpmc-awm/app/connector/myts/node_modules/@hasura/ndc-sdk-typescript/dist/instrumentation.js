"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withInternalActiveSpan = exports.withActiveSpan = exports.USER_VISIBLE_SPAN_ATTRIBUTE = exports.isInitialized = exports.initTelemetry = void 0;
const opentelemetry = __importStar(require("@opentelemetry/sdk-node"));
const exporter_trace_otlp_proto_1 = require("@opentelemetry/exporter-trace-otlp-proto");
const exporter_metrics_otlp_proto_1 = require("@opentelemetry/exporter-metrics-otlp-proto");
const sdk_metrics_1 = require("@opentelemetry/sdk-metrics");
const instrumentation_pino_1 = require("@opentelemetry/instrumentation-pino");
const instrumentation_fastify_1 = require("@opentelemetry/instrumentation-fastify");
const instrumentation_http_1 = require("@opentelemetry/instrumentation-http");
const instrumentation_fetch_1 = require("@opentelemetry/instrumentation-fetch");
const api_1 = require("@opentelemetry/api");
const core_1 = require("@opentelemetry/core");
const propagator_b3_1 = require("@opentelemetry/propagator-b3");
let sdk = null;
function initTelemetry(defaultServiceName = "hasura-ndc", defaultEndpoint = "http://localhost:4318") {
    if (isInitialized()) {
        throw new Error("Telemetry has already been initialized!");
    }
    const serviceName = process.env["OTEL_SERVICE_NAME"] || defaultServiceName;
    const endpoint = process.env["OTEL_EXPORTER_OTLP_ENDPOINT"] || defaultEndpoint;
    sdk = new opentelemetry.NodeSDK({
        serviceName,
        traceExporter: new exporter_trace_otlp_proto_1.OTLPTraceExporter({
            url: `${endpoint}/v1/traces`,
        }),
        metricReader: new sdk_metrics_1.PeriodicExportingMetricReader({
            exporter: new exporter_metrics_otlp_proto_1.OTLPMetricExporter({
                url: `${endpoint}/v1/metrics`,
            }),
        }),
        instrumentations: [
            new instrumentation_http_1.HttpInstrumentation({
                applyCustomAttributesOnSpan: (span, request, response) => {
                    span.setAttributes(exports.USER_VISIBLE_SPAN_ATTRIBUTE);
                },
            }),
            new instrumentation_fastify_1.FastifyInstrumentation({
                requestHook: (span, info) => {
                    span.setAttributes(exports.USER_VISIBLE_SPAN_ATTRIBUTE);
                },
            }),
            new instrumentation_fetch_1.FetchInstrumentation({
                applyCustomAttributesOnSpan: (span, request, response) => {
                    span.setAttributes(exports.USER_VISIBLE_SPAN_ATTRIBUTE);
                    ;
                },
            }),
            // the pino instrumentation adds trace information to pino logs
            new instrumentation_pino_1.PinoInstrumentation({
                logHook: (span, record, level) => {
                    record["resource.service.name"] = serviceName;
                    // This logs the parent span ID in the pino logs, useful for debugging propagation.
                    // parentSpanId is an internal property, hence the cast to any, because I can't
                    // seem to find a way to get at it through a supported API ðŸ˜­
                    record["parent_span_id"] = span.parentSpanId;
                },
            }),
        ],
        textMapPropagator: new core_1.CompositePropagator({
            propagators: [
                new core_1.W3CTraceContextPropagator(),
                new core_1.W3CBaggagePropagator(),
                new propagator_b3_1.B3Propagator(),
                new propagator_b3_1.B3Propagator({ injectEncoding: propagator_b3_1.B3InjectEncoding.MULTI_HEADER }),
            ]
        }),
    });
    process.on("beforeExit", async () => {
        await sdk?.shutdown();
    });
    sdk.start();
}
exports.initTelemetry = initTelemetry;
function isInitialized() {
    return sdk !== null;
}
exports.isInitialized = isInitialized;
exports.USER_VISIBLE_SPAN_ATTRIBUTE = {
    "internal.visibility": "user",
};
function withActiveSpan(tracer, name, func, attributes) {
    return withInternalActiveSpan(tracer, name, func, attributes ? { ...exports.USER_VISIBLE_SPAN_ATTRIBUTE, ...attributes } : exports.USER_VISIBLE_SPAN_ATTRIBUTE);
}
exports.withActiveSpan = withActiveSpan;
function withInternalActiveSpan(tracer, name, func, attributes) {
    return tracer.startActiveSpan(name, (span) => {
        if (attributes)
            span.setAttributes(attributes);
        const handleError = (err) => {
            if (err instanceof Error || typeof err === "string") {
                span.recordException(err);
            }
            span.setStatus({ code: api_1.SpanStatusCode.ERROR });
            span.end();
        };
        try {
            const retval = func(span);
            // If the function returns a Promise, then wire up the span completion to
            // the completion of the promise
            if (typeof retval === "object" &&
                retval !== null &&
                "then" in retval &&
                typeof retval.then === "function") {
                return retval.then((successVal) => {
                    span.end();
                    return successVal;
                }, (errorVal) => {
                    handleError(errorVal);
                    throw errorVal;
                });
            }
            // Not a promise, just end the span and return
            else {
                span.end();
                return retval;
            }
        }
        catch (e) {
            handleError(e);
            throw e;
        }
    });
}
exports.withInternalActiveSpan = withInternalActiveSpan;
//# sourceMappingURL=instrumentation.js.map