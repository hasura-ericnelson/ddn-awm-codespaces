import * as sdk from "@hasura/ndc-sdk-typescript";
export type FunctionsSchema = {
    functions: FunctionDefinitions;
    objectTypes: ObjectTypeDefinitions;
    scalarTypes: ScalarTypeDefinitions;
};
export type FunctionDefinitions = {
    [functionName: string]: FunctionDefinition;
};
export type FunctionDefinition = {
    ndcKind: FunctionNdcKind;
    description: string | null;
    arguments: ArgumentDefinition[];
    resultType: TypeReference;
    parallelDegree: number | null;
};
export declare enum FunctionNdcKind {
    Function = "Function",
    Procedure = "Procedure"
}
export type ArgumentDefinition = {
    argumentName: string;
    description: string | null;
    type: TypeReference;
};
export type ObjectTypeDefinitions = {
    [objectTypeName: string]: ObjectTypeDefinition;
};
export type ObjectTypeDefinition = {
    description: string | null;
    properties: ObjectPropertyDefinition[];
    isRelaxedType: boolean;
};
export type ObjectPropertyDefinition = {
    propertyName: string;
    description: string | null;
    type: TypeReference;
};
export type ScalarTypeDefinitions = {
    [scalarTypeName: string]: ScalarTypeDefinition;
};
export type ScalarTypeDefinition = BuiltInScalarTypeDefinition | RelaxedScalarTypeDefinition;
export type BuiltInScalarTypeDefinition = {
    type: "built-in";
};
export type RelaxedScalarTypeDefinition = {
    type: "relaxed-type";
    usedIn: TypePathSegment[][];
};
export type TypeReference = ArrayTypeReference | NullableTypeReference | NamedTypeReference;
export type ArrayTypeReference = {
    type: "array";
    elementType: TypeReference;
};
export type NullableTypeReference = {
    type: "nullable";
    nullOrUndefinability: NullOrUndefinability;
    underlyingType: TypeReference;
};
export type NamedTypeReference = NamedObjectTypeReference | NamedScalarTypeReference;
export type NamedObjectTypeReference = {
    type: "named";
    name: string;
    kind: "object";
};
export type NamedScalarTypeReference = CustomNamedScalarTypeReference | BuiltInScalarTypeReference;
export type BuiltInScalarTypeReference = StringScalarTypeReference | FloatScalarTypeReference | BooleanScalarTypeReference | BigIntScalarTypeReference | DateTimeScalarTypeReference | JSONScalarTypeReference;
export type CustomNamedScalarTypeReference = {
    type: "named";
    name: string;
    kind: "scalar";
};
export type StringScalarTypeReference = {
    type: "named";
    name: BuiltInScalarTypeName.String;
    kind: "scalar";
    literalValue?: string;
};
export type FloatScalarTypeReference = {
    type: "named";
    name: BuiltInScalarTypeName.Float;
    kind: "scalar";
    literalValue?: number;
};
export type BooleanScalarTypeReference = {
    type: "named";
    name: BuiltInScalarTypeName.Boolean;
    kind: "scalar";
    literalValue?: boolean;
};
export type BigIntScalarTypeReference = {
    type: "named";
    name: BuiltInScalarTypeName.BigInt;
    kind: "scalar";
    literalValue?: bigint;
};
export type DateTimeScalarTypeReference = {
    type: "named";
    name: BuiltInScalarTypeName.DateTime;
    kind: "scalar";
};
export type JSONScalarTypeReference = {
    type: "named";
    name: BuiltInScalarTypeName.JSON;
    kind: "scalar";
};
export declare enum NullOrUndefinability {
    AcceptsNullOnly = "AcceptsNullOnly",
    AcceptsUndefinedOnly = "AcceptsUndefinedOnly",
    AcceptsEither = "AcceptsEither"
}
export declare enum BuiltInScalarTypeName {
    String = "String",
    Float = "Float",
    Boolean = "Boolean",
    BigInt = "BigInt",
    DateTime = "DateTime",
    JSON = "JSON"
}
export declare class JSONValue {
    #private;
    constructor(value: unknown);
    get value(): unknown;
}
export type TypePathSegment = {
    segmentType: "FunctionParameter";
    functionName: string;
    parameterName: string;
} | {
    segmentType: "FunctionReturn";
    functionName: string;
} | {
    segmentType: "ObjectProperty";
    typeName: string;
    preferredTypeName: string;
    propertyName: string;
} | {
    segmentType: "Array";
} | {
    segmentType: "TypeParameter";
    typeName: string;
    index: number;
} | {
    segmentType: "IndexSignature";
    typeName: string;
    sigIndex: number;
    component: "key" | "value";
} | {
    segmentType: "UnionMember";
    typeName: string;
    memberIndex: number;
};
export declare function typePathToString(segments: TypePathSegment[]): string;
export declare function typePathSegmentToString(segment: TypePathSegment): string;
export declare function getNdcSchema(functionsSchema: FunctionsSchema): sdk.SchemaResponse;
export declare function printSchemaListing(functionNdcKind: FunctionNdcKind, functionDefinitions: FunctionDefinitions): void;
export declare function printRelaxedTypesWarning(functionsSchema: FunctionsSchema): void;
export declare function isTypeNameBuiltInScalar(typeName: string): typeName is BuiltInScalarTypeName;
export declare function isBuiltInScalarTypeReference(typeReference: NamedScalarTypeReference): typeReference is BuiltInScalarTypeReference;
//# sourceMappingURL=schema.d.ts.map