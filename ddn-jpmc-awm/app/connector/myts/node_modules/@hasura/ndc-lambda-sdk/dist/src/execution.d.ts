import * as sdk from "@hasura/ndc-sdk-typescript";
import * as schema from "./schema";
export type RuntimeFunctions = {
    [functionName: string]: Function;
};
export declare function executeQuery(queryRequest: sdk.QueryRequest, functionsSchema: schema.FunctionsSchema, runtimeFunctions: RuntimeFunctions): Promise<sdk.QueryResponse>;
export declare function executeMutation(mutationRequest: sdk.MutationRequest, functionsSchema: schema.FunctionsSchema, runtimeFunctions: RuntimeFunctions): Promise<sdk.MutationResponse>;
export declare function prepareArguments(args: Record<string, unknown>, functionDefinition: schema.FunctionDefinition, objectTypes: schema.ObjectTypeDefinitions): unknown[];
export type ErrorDetails = {
    message: string;
    stack: string;
};
export declare function getErrorDetails(error: Error): ErrorDetails;
export type FieldSelection = sdk.NestedField | {
    type: "scalar";
};
export declare function reshapeResultUsingFieldSelection(value: unknown, type: schema.TypeReference, valuePath: string[], fieldSelection: FieldSelection, objectTypes: schema.ObjectTypeDefinitions): unknown;
//# sourceMappingURL=execution.d.ts.map