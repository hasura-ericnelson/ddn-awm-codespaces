"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// We must initialize OpenTelemetry instrumentation before importing any other module
const sdkInstrumentation = __importStar(require("@hasura/ndc-sdk-typescript/instrumentation"));
sdkInstrumentation.initTelemetry("ndc-lambda-sdk");
const sdk = __importStar(require("@hasura/ndc-sdk-typescript"));
const connector_1 = require("./connector");
const cmdline_1 = require("./cmdline");
const program = (0, cmdline_1.makeCommand)({
    serveAction: (hostOpts, serveOpts) => sdk.startServer((0, connector_1.createConnector)({ functionsFilePath: hostOpts.functions }), serveOpts),
});
program.parseAsync().catch(err => {
    console.error(err);
    process.exit(1);
});
//# sourceMappingURL=host.js.map