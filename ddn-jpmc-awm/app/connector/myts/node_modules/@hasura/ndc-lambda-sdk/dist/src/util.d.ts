export declare const unreachable: (x: never) => never;
export declare function isArray(x: unknown): x is unknown[];
export declare function throwError<T>(...args: ConstructorParameters<typeof Error>): NonNullable<T>;
export declare function mapObjectValues<T, U>(obj: {
    [k: string]: T;
}, fn: (value: T, propertyName: string) => U): Record<string, U>;
/**
 * Returns all the set bitwise flags in a value, where the flags are defined on an enum type.
 * Useful for debugging TypeScript API types (eg ts.Type.flags with enum ts.TypeFlags)
 */
export declare function getFlags(flagsEnum: Record<string, string | number>, value: number): string[];
export declare function sleep(ms: number): Promise<void>;
//# sourceMappingURL=util.d.ts.map